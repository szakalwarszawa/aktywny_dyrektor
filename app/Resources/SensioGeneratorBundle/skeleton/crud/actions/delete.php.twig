    /**
{% block phpdoc_method_header %}
     * Deletes a {{ entity }} entity.
{% endblock phpdoc_method_header %}
     *
{% block phpdoc_method_annotations %}
{% if 'annotation' == format %}
     * @Route("/delete/{id}", name="{{ route_name_prefix }}_delete")
{% endif %}
{% endblock phpdoc_method_annotations %}
     */
{% block method_definition %}
    public function deleteAction(Request $request, $id)
{% endblock method_definition %}
    {
{% block method_body %}
        $form = $this->createDeleteForm($id);
        $form->handleRequest($request);
        $em = $this->getDoctrine()->getManager();
        $entity = $em->getRepository('{{ bundle }}:{{ entity }}')->find($id);
        $message = "";
        $autoclose = false;
        if ($form->isValid()) {
            if (!$entity) {
                throw $this->createNotFoundException('Unable to find {{ entity }} entity.');
            }
            $vs = $form->getData();
            $code = md5($vs[('authcode')]);
            $context = "{{ entity }}";
            $auth = $this->get('authcode')->checkAuthcode($code, $context, $id);
            if($auth == 1){
                /*
                -related entites start-
                $md1 = $em->getClassMetadata('{{ bundle }}:{{ entity }}');
                foreach($md1->getAssociationMappings() as $o => $m){
                    $fname = "get".ucfirst($o);
                    foreach($entity->$fname() as $o2)
                    {
                        $fname = "set{{ entity }}";
                        $o2->$fname(null);
                        $em->persist($o2);
                    }
                }
                -related entites end-
                */
                $backlog = $this->get('backlog');
                $backlog->saveLog(null,
                    'Deleted {{ entity }}',
                    '{{ entity }}',
                    $entity->getId()
                ); 
                $em->remove($entity);
                $em->flush();
                $message = "Deleted {{ entity }}. (This window will close in 5 seconds)";
                $autoclose = true;
            }else{
                
                $message = ('Wrong code!');
            }
        }
        $data = array();
        if(!$autoclose && 1 == 0){
            $md1 = $em->getClassMetadata('{{ bundle }}:{{ entity }}');
            foreach($md1->getAssociationMappings() as $o => $m){
                $fname = "get".ucfirst($o);
                $c = count($entity->$fname());
                if($c > 0)
                 $data[] = array('object' => $o, 'objectName' => ucfirst($o), 'targetEntity' => $m['targetEntity'], 'count' => $c);
            }
        }
{% endblock method_body %}

{% block method_return %}
        return $this->render('BgnMainBundle:NoteType:new.html.twig', array(
            'entity'      => $entity,
            'form' => $form->createView(),
            'jsguid' => ('deleteNoteType'.$id),
            'data' => $data,
            'message' => $message,
            'autoclose' => $autoclose
        ));
{% endblock method_return %}
    }

{% block form %}
    /**
     * Creates a form to delete a {{ entity }} entity by id.
     *
     * @param mixed $id The entity id
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm($id)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('{{ route_name_prefix }}_delete', array('id' => $id)))
            ->setMethod('POST')
            ->add('authcode', 'password', array('label' => 'Authorization code', 'required' => true))
            ->add('submit', 'submit', array('label' => 'Delete', 'attr' => array('class' => 'btn btn-danger')))
            ->getForm()
        ;
    }
{% endblock form %}
