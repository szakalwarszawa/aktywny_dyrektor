<?php declare(strict_types=1);

namespace ParpV1\JasperReportsBundle\Repository;

use Doctrine\ORM\Query;
use Doctrine\Common\Collections\ArrayCollection;
use ParpV1\JasperReportsBundle\Fetch\JasperFetch;
use Doctrine\ORM\EntityRepository;

/**
 * RolePrivilegeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RolePrivilegeRepository extends EntityRepository
{
    /**
     * Zwraca dane do siatki.
     *
     * @return array
     */
    public function findDataToGrid(): array
    {
        $queryBuilder = $this->createQueryBuilder('r');
        $queryBuilder
            ->select('r.id, rl.name as roleName, GROUP_CONCAT(DISTINCT p.url SEPARATOR \', \') as reports')
            ->leftJoin('r.role', 'rl')
            ->leftJoin('r.paths', 'p');
        ;

        $queryBuilder->addGroupBy('r.id');

        $result = $queryBuilder
            ->getQuery()
            ->getArrayResult()
        ;

        return $result;
    }

    /**
     * Zwraca id ról dostępnych do użycia.
     *
     * @return array
     */
    public function findUsedRoles(): array
    {
        $queryBuilder = $this->createQueryBuilder('r');

        $queryBuilder
            ->select('rl.id')
            ->join('r.role', 'rl');
        ;

        $result = $queryBuilder
            ->getQuery()
            ->getResult(Query::HYDRATE_SCALAR);

        return array_map('reset', $result);
    }

    /**
     * Zwraca ścieżki do raportów na podstawie ról użytkownika.
     *
     * @param array $roles
     *
     * @return array
     */
    public function findPathsByRoles(array $roles, JasperFetch $jasperFetch): array
    {
        $queryBuilder = $this->createQueryBuilder('r');
        $queryBuilder
            ->select('r, p')
            ->join('r.paths', 'p')
            ->join('r.role', 'rl')
            ->where('rl.name IN(:roles)')
            ->setParameter('roles', $roles)
        ;

        $result = $queryBuilder
            ->getQuery()
            ->getArrayResult()
        ;

        $availablePaths = new ArrayCollection();
        foreach ($result as $rolePrivilege) {
            foreach ($rolePrivilege['paths'] as $path) {
                    $availablePaths->add($path);
            }
        }

        $folderChildren = new ArrayCollection();
        foreach ($availablePaths as $path) {
            if ($path['isRepository']) {
                $allFromFolder = $jasperFetch
                    ->findAllFromFolderUrl($path['url'])
                ;
                $folderChildren->add($allFromFolder);
                $availablePaths->removeElement($path);
            }
        }

        $mergedChildren = new ArrayCollection();
        foreach ($folderChildren as $child) {
            if ($child->count()) {
                foreach ($child as $element) {
                    $mergedChildren->add($element);
                }
            }
        }

        $mergedCollection = new ArrayCollection(array_merge($availablePaths->toArray(), $mergedChildren->toArray()));
        $uniqueCollection = new ArrayCollection();
        foreach ($mergedCollection as $path) {
            $exists = $uniqueCollection->exists(function ($key, $element) use ($path) {
                return $path['url'] === $element['url'];
            });

            if (!$exists) {
                $uniqueCollection->add($path);
            }
        }

        return $uniqueCollection->toArray();
    }
}
